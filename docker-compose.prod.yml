version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ghcr.io/macayaven/re-frame-backend:latest
    ports:
      - "8000:8000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CONFIGCAT_SDK_KEY=${CONFIGCAT_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - PORT=8000
      - PYTHONUNBUFFERED=1
      # CORS settings - will be handled by backend code based on ENVIRONMENT
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.standalone
      args:
        - NEXT_PUBLIC_ENVIRONMENT=production
    image: ghcr.io/macayaven/re-frame-frontend:latest
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - SERVICE_NAME=re-frame-frontend
      - BACKEND_INTERNAL_HOST=http://backend:8000
      - BACKEND_PUBLIC_URL=http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    name: re-frame-network

# Volumes for persistent data (if needed in future)
volumes:
  backend-data:
  frontend-cache:
