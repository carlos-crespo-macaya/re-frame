name: Preview Deployment to Cloud Run

on:
  pull_request:
    types: [opened, synchronize]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  NODE_VERSION: '18.x'
  PNPM_VERSION: '10.11.0'

jobs:
  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set preview service name
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PREVIEW_SERVICE="re-frame-preview-pr-${PR_NUMBER}"
          echo "PREVIEW_SERVICE=${PREVIEW_SERVICE}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/re-frame/${{ env.PREVIEW_SERVICE }}:${{ github.sha }} .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/re-frame/${{ env.PREVIEW_SERVICE }}:${{ github.sha }}

      - name: Deploy preview to Cloud Run
        run: |
          gcloud run deploy ${{ env.PREVIEW_SERVICE }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/re-frame/${{ env.PREVIEW_SERVICE }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 2 \
            --set-env-vars "NODE_ENV=preview" \
            --set-env-vars "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" \
            --labels "pr=${{ github.event.pull_request.number }},type=preview"

      - name: Get preview URL
        id: get-url
        run: |
          PREVIEW_URL=$(gcloud run services describe ${{ env.PREVIEW_SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.get-url.outputs.url }}';
            const prNumber = context.issue.number;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ”— **Preview Deployment**')
            );
            
            const body = `ðŸ”— **Preview Deployment**
            
            Your preview is ready at: ${previewUrl}
            
            **Details:**
            - PR: #${prNumber}
            - Commit: \`${context.sha.substring(0, 7)}\`
            - Updated: ${new Date().toUTCString()}
            
            This preview will be automatically updated as you push new commits.
            Preview deployments are automatically cleaned up when the PR is closed.`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }