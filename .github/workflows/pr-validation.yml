name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            FE
            BE
            INF
            ALL
          requireScope: true
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { additions, deletions } = pr;
            const totalChanges = additions + deletions;
            
            let comment = '';
            
            if (totalChanges > 1000) {
              comment = `‚ö†Ô∏è **Large PR Alert**: This PR contains ${totalChanges} changes (${additions} additions, ${deletions} deletions).
              
              Consider breaking this into smaller, more reviewable PRs.`;
            } else if (totalChanges > 500) {
              comment = `üìä **PR Size**: ${totalChanges} changes (${additions} additions, ${deletions} deletions).
              
              This is a medium-sized PR. Please ensure it has been thoroughly tested.`;
            }
            
            if (comment) {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Label PR
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check for merge conflicts
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            if (pr.mergeable_state === 'conflicting') {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùå **Merge Conflict**: This PR has conflicts that must be resolved before it can be merged.'
              });
              
              core.setFailed('PR has merge conflicts');
            }

  check-commits:
    name: Check Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          # Get all commits in the PR
          COMMITS=$(git log --format='%s' origin/${{ github.base_ref }}..HEAD)
          
          # Pattern for valid commit messages
          PATTERN='^\[(FE|BE|INF|ALL)-[0-9]+\] .+'
          
          # Check each commit
          INVALID_COMMITS=""
          while IFS= read -r commit; do
            if ! echo "$commit" | grep -qE "$PATTERN"; then
              INVALID_COMMITS="${INVALID_COMMITS}\n- ${commit}"
            fi
          done <<< "$COMMITS"
          
          if [ -n "$INVALID_COMMITS" ]; then
            echo "‚ùå Invalid commit messages found:"
            echo -e "$INVALID_COMMITS"
            exit 1
          fi
          
          echo "‚úÖ All commit messages are valid"

  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '10.11.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Deploy preview to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          
      - name: Comment preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = process.env.PREVIEW_URL;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üîó **Preview**: ${previewUrl}\n\nThis preview will be updated automatically as you push new commits.`
            });