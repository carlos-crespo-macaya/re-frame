name: Manual Checks

on:
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        type: choice
        options:
          - all
          - backend-only
          - frontend-only
          - infrastructure-only
          - security-only
      verbose:
        description: 'Enable verbose output'
        required: false
        type: boolean
        default: false

jobs:
  backend-checks:
    name: Backend Checks
    if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'backend-only' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run comprehensive checks
      run: |
        echo "=== Running Backend Checks ==="
        
        echo "1. Ruff linting..."
        poetry run ruff check . ${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }}
        
        echo "2. Code formatting..."
        poetry run ruff format --check .
        poetry run black --check .
        
        echo "3. Type checking..."
        poetry run mypy . ${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }}
        
        echo "4. Security scanning..."
        poetry run bandit -r . -ll
        
        echo "5. Running tests..."
        poetry run pytest -v --cov=. --cov-report=term-missing

  frontend-checks:
    name: Frontend Checks
    if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'frontend-only' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run comprehensive checks
      run: |
        echo "=== Running Frontend Checks ==="
        
        echo "1. ESLint..."
        pnpm lint ${{ github.event.inputs.verbose == 'true' && '--debug' || '' }}
        
        echo "2. Prettier..."
        pnpm prettier:check
        
        echo "3. TypeScript..."
        pnpm type-check
        
        echo "4. Build test..."
        pnpm build
        
        echo "5. Running tests..."
        pnpm test:ci

  infrastructure-checks:
    name: Infrastructure Checks
    if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'infrastructure-only' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/terraform
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Setup tools
      run: |
        # Install TFLint
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        
        # Install Checkov
        pip install checkov
    
    - name: Run comprehensive checks
      run: |
        echo "=== Running Infrastructure Checks ==="
        
        echo "1. Terraform format..."
        terraform fmt -check -recursive ${{ github.event.inputs.verbose == 'true' && '-diff' || '' }}
        
        echo "2. Terraform init..."
        terraform init -backend=false
        
        echo "3. Terraform validate..."
        terraform validate
        
        echo "4. TFLint..."
        tflint --init
        tflint --recursive ${{ github.event.inputs.verbose == 'true' && '--loglevel=debug' || '' }}
        
        echo "5. Security scanning with Checkov..."
        checkov -d . --framework terraform ${{ github.event.inputs.verbose == 'true' && '--compact' || '--quiet' }}

  security-audit:
    name: Security Audit
    if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security-only' }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run comprehensive security audit
      run: |
        echo "=== Running Security Audit ==="
        
        echo "1. Checking for secrets..."
        docker run --rm -v "$PWD:/path" ghcr.io/gitleaks/gitleaks:latest detect --source="/path" --verbose=${{ github.event.inputs.verbose }}
        
        echo "2. Dependency vulnerabilities..."
        docker run --rm -v "$PWD:/src" aquasec/trivy fs /src
        
        echo "3. SAST analysis..."
        # Run basic SAST checks
        find . -name "*.py" -type f -exec grep -l "eval\|exec\|__import__" {} \; | head -20
        find . -name "*.js" -o -name "*.ts" -type f -exec grep -l "eval\|innerHTML\|dangerouslySetInnerHTML" {} \; | head -20
    
    - name: Generate security report
      run: |
        echo "# Security Audit Report" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "Triggered by: ${{ github.actor }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Summary" >> security-report.md
        echo "All security checks completed. Review the logs for detailed findings." >> security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: security-report.md

  summary:
    name: Checks Summary
    needs: [backend-checks, frontend-checks, infrastructure-checks, security-audit]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Generate summary
      run: |
        echo "## Manual Checks Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check Type: ${{ github.event.inputs.check_type }}" >> $GITHUB_STEP_SUMMARY
        echo "Verbose: ${{ github.event.inputs.verbose }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ${{ needs.backend-checks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ needs.frontend-checks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure: ${{ needs.infrastructure-checks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY