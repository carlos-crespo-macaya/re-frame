name: Voice Mode Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/src/audio/**'
      - 'backend/tests/test_audio*'
      - 'frontend/lib/audio/**'
      - 'frontend/components/audio/**'
      - 'playwright-js/tests/voice-*.spec.js'
      - '.github/workflows/voice-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/src/audio/**'
      - 'backend/tests/test_audio*'
      - 'frontend/lib/audio/**'
      - 'frontend/components/audio/**'
      - 'playwright-js/tests/voice-*.spec.js'
      - '.github/workflows/voice-tests.yml'

env:
  VOICE_MODE_ENABLED: true

jobs:
  voice-unit-tests:
    name: Voice Unit Tests
    runs-on: self-hosted
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg sox libasound2-dev
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      - name: Set up Python
        run: uv python install 3.12
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Run backend voice tests
        working-directory: backend
        run: |
          uv sync --all-extras
          uv run pytest tests/test_audio* -v --no-cov

  voice-e2e-tests:
    name: Voice E2E Tests
    runs-on: self-hosted
    needs: voice-unit-tests
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          REDACTED${{ hashFiles('playwright-js/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-chromium-
            ${{ runner.os }}-playwright-
      
      - name: Install Playwright browsers
        run: |
          cd playwright-js
          npm ci
          npx playwright install --with-deps chromium
      
      - name: Create .env file
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "VOICE_MODE_ENABLED=true" >> .env
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build and start services
        run: |
          docker compose up -d --build
          
      - name: Wait for services
        run: |
          echo "Waiting for services to be healthy..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health && curl -f http://localhost:3000; do sleep 2; done'
      
      - name: Run voice E2E tests
        run: |
          cd playwright-js
          npx playwright test --config playwright.config.ts tests/voice-*.spec.js --project=chromium
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: voice-test-results
          path: |
            playwright-js/test-results/
            test-results/
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-js/playwright-report/
          
      - name: Print service logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          docker compose logs backend --tail=100
          echo "=== Frontend Logs ==="
          docker compose logs frontend --tail=100
      
      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  voice-performance-tests:
    name: Voice Performance Tests
    runs-on: self-hosted
    needs: voice-e2e-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg sox libasound2-dev
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      - name: Set up Python
        run: uv python install 3.12
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
        
      - name: Create .env file
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "VOICE_MODE_ENABLED=true" >> .env
      
      - name: Build services for performance testing
        run: |
          docker compose build
          
      - name: Run load tests
        working-directory: backend
        run: |
          uv sync --all-extras
          uv run pytest tests/load/test_voice_concurrency.py -v -m load || true
      
      - name: Generate performance report
        run: |
          echo "## Voice Performance Test Results" > performance-report.md
          echo "Date: $(date)" >> performance-report.md
          echo "Commit: ${{ github.sha }}" >> performance-report.md
          # Add more performance metrics here
          
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md