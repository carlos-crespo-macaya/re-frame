name: Deploy to Cloud Run (frontend + backend)

on:
  workflow_run:
    workflows: ["Backend CI", "Frontend CI"]
    types: [completed]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        type: choice
        default: production
        options: [production, staging]
      imageTag:
        description: "Override image tag (else uses commit SHA)"
        required: false
      force:
        description: "Skip CI-status gate (use with caution)"
        type: boolean
        default: false

permissions:
  contents: read
  checks: read
  statuses: read
  id-token: write
  actions: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}                       # <─ now from secret
  BACKEND_SERVICE: ${{ secrets.GCP_BACKEND_SERVICE_NAME || 're-frame-backend' }}
  FRONTEND_SERVICE: ${{ secrets.GCP_FRONTEND_SERVICE_NAME || 're-frame-frontend' }}
  REGISTRY: ${{ secrets.GCP_REGISTRY || format('{0}-docker.pkg.dev/{1}/re-frame', secrets.GCP_REGION, secrets.GCP_PROJECT_ID) }}
  IMAGE_PREFIX: ${{ secrets.GCP_IMAGE_PREFIX || 're-frame' }}
  VPC_CONNECTOR: run-to-run-connector
  VPC_RANGE: 10.8.0.0/28      # /28 gives 16 IPs – plenty for two services

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
# --------------------------------------------------------------------------- #
# 1. Gate: only proceed after CI success (or manual force)
# --------------------------------------------------------------------------- #
  gate:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')
    outputs:
      proceed:   ${{ steps.check.outputs.proceed }}
      head_sha:  ${{ steps.vars.outputs.head_sha }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - name: Vars
        id: vars
        run: |
          SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
          echo "head_sha=$SHA" >>"$GITHUB_OUTPUT"

          TAG="${{ inputs.imageTag || '' }}"
          [[ -z $TAG ]] && TAG="$SHA"
          echo "image_tag=$TAG" >>"$GITHUB_OUTPUT"

      - name: Check Backend + Frontend CI
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const isDispatch = context.eventName === 'workflow_dispatch';
            const force      = context.payload.inputs?.force === 'true';
            if (isDispatch && force)     { core.setOutput('proceed','true'); return; }
            if (isDispatch)              { core.setOutput('proceed','true'); return; }

            const sha   = '${{ steps.vars.outputs.head_sha }}';
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            async function status(name) {
              const {data:{workflows}} = await github.rest.actions.listRepoWorkflows({owner,repo});
              const wf = workflows.find(w=>w.name===name);
              if (!wf) return 'not_found';
              const {data:{workflow_runs}} =
                     await github.rest.actions.listWorkflowRuns({owner,repo,workflow_id:wf.id,branch:'main',per_page:100});
              const run = workflow_runs.find(r=>r.head_sha===sha);
              return run ? (run.conclusion||'unknown') : 'none';
            }

            const ok = (await status('Backend CI'))==='success'
                    && (await status('Frontend CI'))==='success';
            core.setOutput('proceed', ok ? 'true' : 'false');

# --------------------------------------------------------------------------- #
# 2. Build & Push images
# --------------------------------------------------------------------------- #
  build-and-push:
    needs: gate
    if: needs.gate.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
          - service: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile.standalone
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:            ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Download OpenAPI schema from Backend CI workflow
      - name: Download OpenAPI schema
        if: matrix.service == 'frontend'
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow: backend-ci.yml
          workflow_conclusion: success
          name: openapi-schema
          path: frontend/
          commit: ${{ needs.gate.outputs.head_sha }}

      - uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file:    ${{ matrix.dockerfile }}
          push:    true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.gate.outputs.head_sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.ref_name }}
          build-args: |
            ${{ matrix.service == 'frontend' && 'BUILD_TARGET=production' || '' }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max

# --------------------------------------------------------------------------- #
# 3. Deploy backend   (internal-only ingress)
# --------------------------------------------------------------------------- #
  deploy-backend:
    needs: [gate, build-and-push]
    if: needs.gate.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      backend_url: ${{ steps.backend-url.outputs.url }}
    steps:
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:            ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Ensure VPC connector
        run: |
          gcloud compute networks vpc-access connectors describe ${{ env.VPC_CONNECTOR }} \
                --region ${{ env.REGION }} || \
          gcloud compute networks vpc-access connectors create   ${{ env.VPC_CONNECTOR }} \
                --region ${{ env.REGION }} --network default --range ${{ env.VPC_RANGE }}

      - name: Deploy backend (private)
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:${{ needs.gate.outputs.head_sha }} \
            --platform       managed \
            --region         ${{ env.REGION }} \
            --execution-environment gen2 \
            --timeout        300 \
            --vpc-connector  ${{ env.VPC_CONNECTOR }} \
            --ingress        internal \
            --no-allow-unauthenticated \
            --port           8000 \
            --cpu            2 \
            --memory         1Gi \
            --min-instances  0 \
            --max-instances  10 \
            --set-env-vars   "ENVIRONMENT=${{ inputs.environment || 'production' }},LOG_LEVEL=info,GCP_PROJECT_ID=${{ env.PROJECT_ID }},GCP_REGION=${{ env.REGION }},CONFIGCAT_SDK_KEY=${{ secrets.CONFIGCAT_API_KEY }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"

      - name: Get backend URL dynamically
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "Backend URL: $BACKEND_URL"
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

# --------------------------------------------------------------------------- #
# 4. Deploy frontend  (egress routed via VPC connector)
# --------------------------------------------------------------------------- #
  deploy-frontend:
    needs: [gate, build-and-push, deploy-backend]
    if: needs.gate.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:            ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy frontend
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:${{ needs.gate.outputs.head_sha }} \
            --platform       managed \
            --region         ${{ env.REGION }} \
            --execution-environment gen2 \
            --timeout        300 \
            --allow-unauthenticated \
            --vpc-connector  ${{ env.VPC_CONNECTOR }} \
            --vpc-egress     all \
            --port           8080 \
            --cpu            2 \
            --memory         1Gi \
            --min-instances  0 \
            --max-instances  10 \
            --set-env-vars   "NODE_ENV=production,BACKEND_INTERNAL_HOST=${{ env.BACKEND_SERVICE }}.${{ env.REGION }}.internal,BACKEND_PUBLIC_URL=${{ needs.deploy-backend.outputs.backend_url }},GCP_PROJECT_ID=${{ env.PROJECT_ID }},GCP_REGION=${{ env.REGION }}"

      - name: Grant frontend SA invoke rights on backend
        run: |
          SA=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
                  --region ${{ env.REGION }} --format='value(spec.template.spec.serviceAccountName)')
          gcloud run services add-iam-policy-binding ${{ env.BACKEND_SERVICE }} \
            --region ${{ env.REGION }} \
            --member "serviceAccount:$SA" \
            --role   roles/run.invoker

# --------------------------------------------------------------------------- #
# 6. Summary
# --------------------------------------------------------------------------- #
  summary:
    needs: [deploy-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment summary
        run: |
          echo "## Cloud Run Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Project   : ${{ env.PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- Region    : ${{ env.REGION }}"     >> $GITHUB_STEP_SUMMARY
          echo "- Backend   : ${{ env.BACKEND_SERVICE }} (internal)" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend  : ${{ env.FRONTEND_SERVICE }} (egress via VPC)" >> $GITHUB_STEP_SUMMARY
