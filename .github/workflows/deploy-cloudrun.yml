name: Deploy to Cloud Run (frontend + backend)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment label (used only for summaries)"
        type: choice
        default: production
        options:
          - production
          - staging

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  BACKEND_SERVICE: re-frame-backend
  FRONTEND_SERVICE: re-frame-frontend
  REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/re-frame

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
          - service: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile.standalone
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}
          tags: |
            type=sha
            type=ref,event=branch

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}:${{ github.ref_name }}
            ${{ github.ref == 'refs/heads/main' && format('{0}/re-frame-{1}:latest', env.REGISTRY, matrix.service) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-backend:
    name: Deploy Backend
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image ${{ env.REGISTRY }}/re-frame-backend:${{ github.ref_name }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8000 \
            --cpu 1 \
            --memory 1Gi \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "ENVIRONMENT=${{ inputs.environment || 'production' }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},LOG_LEVEL=info"

      - name: Capture backend URL
        id: be
        run: |
          URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"

  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Get backend URL
        id: be
        run: |
          URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image ${{ env.REGISTRY }}/re-frame-frontend:${{ github.ref_name }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "NODE_ENV=production,NEXT_PUBLIC_API_URL=${{ steps.be.outputs.url }},API_URL=${{ steps.be.outputs.url }}"

      - name: Capture frontend URL
        id: fe
        run: |
          URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"

  summary:
    name: Deployment Summary
    needs: [deploy-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Output
        run: |
          echo "## Cloud Run Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Project: ${{ env.PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- Region: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend service: ${{ env.BACKEND_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend service: ${{ env.FRONTEND_SERVICE }}" >> $GITHUB_STEP_SUMMARY
