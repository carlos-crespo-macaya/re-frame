name: Deploy to Cloud Run (frontend + backend)

on:
  workflow_run:
    workflows: ["Backend CI", "Frontend CI"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment label (used only for summaries)"
        type: choice
        default: production
        options:
          - production
          - staging

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  BACKEND_SERVICE: re-frame-backend
  FRONTEND_SERVICE: re-frame-frontend
  REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/re-frame

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gate:
    name: Gate on CI success
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
      head_sha: ${{ steps.vars.outputs.head_sha }}
    steps:
      - name: Set variables
        id: vars
        run: |
          # Use the head SHA from the workflow_run event; fallback to github.sha for manual dispatch
          HEAD_SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
          echo "head_sha=$HEAD_SHA" >> "$GITHUB_OUTPUT"
      - name: Install GitHub CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          type -p gh >/dev/null || (curl -fsSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | bash)
      - name: Check Backend CI and Frontend CI status for same commit on main
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # If manual dispatch, allow deploy
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "proceed=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          HEAD_SHA="${{ steps.vars.outputs.head_sha }}"
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name || github.repository }}"
          echo "Checking CI statuses for $OWNER/$REPO @ $HEAD_SHA"

          # Helper to get latest run conclusion for a workflow name and sha on branch main
          get_conclusion () {
            local name="$1"
            gh api repos/$OWNER/$REPO/actions/workflows --jq ".workflows[] | select(.name==\"$name\") | .id" | while read -r wid; do
              if [ -z "$wid" ]; then
                echo "not_found"
                return
              fi
              gh api repos/$OWNER/$REPO/actions/workflows/$wid/runs -f per_page=50 -f branch=main --jq ".workflow_runs[] | select(.head_sha==\"$HEAD_SHA\") | .conclusion" | head -n1
              return
            done
          }

          BACKEND_CONC=$(get_conclusion "Backend CI")
          FRONTEND_CONC=$(get_conclusion "Frontend CI")

          echo "Backend CI: ${BACKEND_CONC:-none}"
          echo "Frontend CI: ${FRONTEND_CONC:-none}"

          if [ "$BACKEND_CONC" = "success" ] && [ "$FRONTEND_CONC" = "success" ]; then
            echo "proceed=true" >> "$GITHUB_OUTPUT"
          else
            echo "proceed=false" >> "$GITHUB_OUTPUT"
            echo "One or both CI workflows not successful for $HEAD_SHA. Skipping deploy."
          fi

  build-and-push:
    name: Build and Push Images
    needs: gate
    if: needs.gate.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
          - service: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile.standalone
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}
          tags: |
            type=sha
            type=ref,event=branch

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-backend:
    name: Deploy Backend
    needs: build-and-push
    if: needs.gate.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image ${{ env.REGISTRY }}/re-frame-backend:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8000 \
            --cpu 1 \
            --memory 1Gi \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "ENVIRONMENT=${{ inputs.environment || 'production' }},LOG_LEVEL=info" \
            --update-secrets "GEMINI_API_KEY=projects/${{ env.PROJECT_ID }}/secrets/GEMINI_API_KEY:latest"

      - name: Capture backend URL
        id: be
        run: |
          URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"

  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-backend
    if: needs.gate.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Get backend URL
        id: be
        run: |
          URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image ${{ env.REGISTRY }}/re-frame-frontend:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "NODE_ENV=production,NEXT_PUBLIC_API_URL=${{ steps.be.outputs.url }},API_URL=${{ steps.be.outputs.url }}"

      - name: Capture frontend URL
        id: fe
        run: |
          URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"

  summary:
    name: Deployment Summary
    needs: [deploy-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Output
        run: |
          echo "## Cloud Run Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Project: ${{ env.PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- Region: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend service: ${{ env.BACKEND_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend service: ${{ env.FRONTEND_SERVICE }}" >> $GITHUB_STEP_SUMMARY
