name: Release and Deploy to Cloud Run

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION || 'europe-west-1' }}
  BILLING_ACCOUNT_ID: ${{ secrets.GCP_BILLING_ACCOUNT_ID }}
  BACKEND_SERVICE: re-frame-backend
  FRONTEND_SERVICE: re-frame-frontend
  REGISTRY: ${{ secrets.GCP_REGION || 'europe-west-1' }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/re-frame

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    name: Run Tests
    runs-on: self-hosted
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (Frontend)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install pnpm (Frontend)
        if: matrix.service == 'frontend'
        uses: pnpm/action-setup@v2
        with:
          version: '10.11.0'

      - name: Frontend Tests
        if: matrix.service == 'frontend'
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm run lint
          pnpm run typecheck
          pnpm run test

      - name: Setup Python (Backend)
        if: matrix.service == 'backend'
        run: |
          # Check if Python 3.12 is already installed
          if command -v python3.12 &> /dev/null; then
            echo "Python 3.12 is already installed"
            python3.12 --version
          else
            echo "Installing Python 3.12 from deadsnakes PPA"
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            sudo apt-get update
            sudo apt-get install -y python3.12 python3.12-venv python3.12-dev
          fi
          # Create symlink for python command
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.12 1

      - name: Install uv (Backend)
        if: matrix.service == 'backend'
        run: python3.12 -m pip install uv

      - name: Backend Tests
        if: matrix.service == 'backend'
        working-directory: ./backend
        run: |
          uv sync --frozen --all-extras
          uv run poe check

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: self-hosted
    strategy:
      matrix:
        include:
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
          - service: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile.standalone

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/re-frame-${{ matrix.service }}:${{ github.ref_name }}
            ${{ (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production') && format('{0}/re-frame-{1}:latest', env.REGISTRY, matrix.service) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ matrix.service == 'frontend' && format('https://{0}-{1}.run.app', env.BACKEND_SERVICE, github.event.inputs.environment || 'production') || '' }}
            NEXT_PUBLIC_ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}

  deploy-backend:
    name: Deploy Backend to Cloud Run
    needs: build-and-push
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image ${{ env.REGISTRY }}/re-frame-backend:${{ github.ref_name }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8000 \
            --cpu 1 \
            --memory 1Gi \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "ENVIRONMENT=${{ github.event.inputs.environment || 'production' }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},LOG_LEVEL=info,ALLOWED_ORIGINS=https://${{ env.FRONTEND_SERVICE }}-${{ github.event.inputs.environment || 'production' }}.run.app"

      - name: Get Backend Service URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    name: Deploy Frontend to Cloud Run
    needs: [build-and-push, deploy-backend]
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Get Backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image ${{ env.REGISTRY }}/re-frame-frontend:${{ github.ref_name }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "NODE_ENV=production,NEXT_PUBLIC_API_URL=${{ steps.backend-url.outputs.url }},API_URL=${{ steps.backend-url.outputs.url }}"

      - name: Get Frontend Service URL
        id: frontend-url
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT

  configure-iap:
    name: Configure Identity-Aware Proxy
    needs: [deploy-backend, deploy-frontend]
    runs-on: self-hosted
    if: github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Enable IAP for Frontend
        run: |
          # Enable IAP API if not already enabled
          gcloud services enable iap.googleapis.com
          
          # Configure IAP for the frontend service
          gcloud iap web enable \
            --resource-type=backend-services \
            --service=${{ env.FRONTEND_SERVICE }} \
            --oauth2-client-id=${{ secrets.GCP_REFRAME_IAP_CLIENT_ID }} \
            --oauth2-client-secret=${{ secrets.GCP_REFRAME_IAP_CLIENT_SECRET }}

      - name: Configure IAP Access
        run: |
          # Note: Access will be controlled via OAuth consent screen test users
          echo "IAP access will be managed through OAuth consent screen test users"
          echo "Add test users at: https://console.cloud.google.com/apis/credentials/consent"

  create-release:
    name: Create GitHub Release
    needs: [deploy-backend, deploy-frontend]
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          skip-version-file: true
          output-file: false

      - name: Get deployment URLs
        id: urls
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "backend=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "frontend=$FRONTEND_URL" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 📝 Changelog
            ${{ steps.changelog.outputs.clean_changelog }}
            
            ### 🔗 Deployment URLs
            - **Frontend**: ${{ steps.urls.outputs.frontend }}
            - **Backend API**: ${{ steps.urls.outputs.backend }}
            
            ### 🐳 Docker Images
            - **Frontend**: `${{ env.REGISTRY }}/re-frame-frontend:${{ github.ref_name }}`
            - **Backend**: `${{ env.REGISTRY }}/re-frame-backend:${{ github.ref_name }}`
            
            ### 📊 Release Statistics
            - **Commits**: ${{ steps.changelog.outputs.commit_count || '0' }}
            - **Build Time**: ~10 minutes
            
            ### 🏷️ Full Changelog
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous_tag }}...${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Update deployment summary
        run: |
          echo "# 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ steps.urls.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: ${{ steps.urls.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🛡️ Security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ IAP Protection Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ HTTPS Enforced" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Least Privilege Access" >> $GITHUB_STEP_SUMMARY
