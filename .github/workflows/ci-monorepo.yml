name: Monorepo CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '10.11.0'
  PYTHON_VERSION: '3.12'
  UV_VERSION: '0.4.15'

jobs:
  # Determine what changed
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/frontend-*.yml'
              - '.github/workflows/ci-monorepo.yml'
              - 'package.json'
            backend:
              - 'backend/**'
              - '.github/workflows/backend-*.yml'
              - '.github/workflows/ci-monorepo.yml'
              - 'docker-compose.yml'
            docs:
              - 'docs/**'
              - '*.md'

  # Frontend Jobs
  frontend-lint:
    name: Frontend Lint
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          cd frontend
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: frontend
        run: pnpm lint

      - name: Run type checking
        working-directory: frontend
        run: pnpm typecheck

  frontend-test:
    name: Frontend Test
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Run tests
        working-directory: frontend
        run: pnpm test --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend

  frontend-build:
    name: Frontend Build
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: frontend
        run: pnpm build

      - name: Check bundle size
        working-directory: frontend
        run: |
          # Add bundle size check here
          echo "Bundle size check placeholder"

  # Backend Jobs
  backend-test:
    name: Backend Test
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        working-directory: backend
        run: uv sync --all-extras

      - name: Run all checks
        working-directory: backend
        run: |
          uv run poe check

      - name: Check test coverage
        working-directory: backend
        run: |
          uv run poe test-cov
          uv run coverage report --fail-under=80

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  # Integration Tests
  integration-tests:
    name: Integration Tests
    needs: [changes, frontend-build, backend-test]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build services
        run: |
          docker-compose build

      - name: Start services
        run: |
          docker-compose up -d
          # Wait for services to be ready
          sleep 30

      - name: Check backend health
        run: |
          curl -f http://localhost:8000/health || exit 1

      - name: Check frontend health
        run: |
          curl -f http://localhost:3000 || exit 1

      - name: Run integration tests
        run: |
          # Add integration test commands here
          echo "Integration tests placeholder"

      - name: Stop services
        if: always()
        run: |
          docker-compose down

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan on frontend
        if: needs.changes.outputs.frontend == 'true'
        working-directory: frontend
        run: |
          npx audit-ci --high

      - name: Run security scan on backend
        if: needs.changes.outputs.backend == 'true'
        working-directory: backend
        run: |
          # Add Python security scanning
          echo "Python security scan placeholder"

  # All checks passed
  all-checks:
    name: All Checks Passed
    needs: [frontend-lint, frontend-test, frontend-build, backend-test, integration-tests, security-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check results
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more checks failed"
            exit 1
          else
            echo "All checks passed!"
          fi