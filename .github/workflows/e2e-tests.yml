name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: self-hosted
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        run: |
          # Check if Python 3.11 is already installed
          if command -v python3.11 &> /dev/null; then
            echo "Python 3.11 is already installed"
            python3.11 --version
          else
            echo "Installing Python 3.11 from deadsnakes PPA"
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            sudo apt-get update
            sudo apt-get install -y python3.11 python3.11-venv python3.11-dev
          fi
          # Create symlink for python command
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            tests/e2e/venv
          key: ${{ runner.os }}-pip-${{ hashFiles('tests/e2e/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        working-directory: tests/e2e
        run: |
          python3.11 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('tests/e2e/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        working-directory: tests/e2e
        run: |
          source venv/bin/activate
          playwright install --with-deps chromium

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create .env file
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env

      - name: Build and start services
        run: |
          docker compose -f docker-compose.yml -f tests/e2e/docker-compose.test.yml build
          docker compose -f docker-compose.yml -f tests/e2e/docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          echo "Waiting for services to be healthy..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health && curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        working-directory: tests/e2e
        env:
          HEADLESS: true
          DEBUG_NETWORK: false
        run: |
          source venv/bin/activate
          # Run tests in parallel using pytest-xdist
          # Settings are configured in pytest.ini (defaults to -n auto)
          pytest

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            tests/e2e/test-results/
            tests/e2e/screenshots/

      - name: Upload Playwright traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: tests/e2e/test-results/

      - name: Print service logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          docker compose -f docker-compose.yml -f tests/e2e/docker-compose.test.yml logs backend
          echo "=== Frontend Logs ==="
          docker compose -f docker-compose.yml -f tests/e2e/docker-compose.test.yml logs frontend

      - name: Stop services
        if: always()
        run: |
          docker compose -f docker-compose.yml -f tests/e2e/docker-compose.test.yml down -v