name: Voice Playwright Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'playwright-js/tests/voice-*.spec.js'
      - 'frontend/lib/audio/**'
      - 'frontend/components/audio/**'
      - 'frontend/test-utils/audio-helpers.ts'
      - '.github/workflows/voice-playwright-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'playwright-js/tests/voice-*.spec.js'
      - 'frontend/lib/audio/**'
      - 'frontend/components/audio/**'
      - 'frontend/test-utils/audio-helpers.ts'
      - '.github/workflows/voice-playwright-tests.yml'

jobs:
  voice-playwright-tests:
    name: Voice Network Resilience Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        working-directory: playwright-js
        run: npm ci
            
      - name: Install Playwright browsers
        working-directory: playwright-js
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Create .env file
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "VOICE_MODE_ENABLED=true" >> .env
          echo "FRONTEND_URL=http://localhost:3000" >> .env
      
      - name: Build and start services
        run: |
          docker compose up -d --build
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for backend..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          echo "Waiting for frontend..."
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          echo "Services are ready!"
      
      - name: Run voice network resilience tests - ${{ matrix.browser }}
        working-directory: playwright-js
        run: |
          npx playwright test --config playwright.config.ts voice-network-resilience.spec.js --project=${{ matrix.browser }} --reporter=list,html
      
      - name: Upload test results - ${{ matrix.browser }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: voice-test-results-${{ matrix.browser }}
          path: |
            playwright-js/test-results/
            playwright-js/playwright-report/
      
      - name: Upload screenshots on failure - ${{ matrix.browser }}
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: voice-test-screenshots-${{ matrix.browser }}
          path: |
            playwright-js/test-results/**/*.png
            playwright-js/test-results/**/*.webm
          
      - name: Print logs on failure
        if: failure()
        run: |
          echo "=== Docker compose status ==="
          docker compose ps
          echo "=== Backend logs ==="
          docker compose logs backend --tail=50
          echo "=== Frontend logs ==="
          docker compose logs frontend --tail=50
      
      - name: Stop services
        if: always()
        run: docker compose down -v

  voice-integration-summary:
    name: Voice Tests Summary
    runs-on: ubuntu-latest
    needs: voice-playwright-tests
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Voice network resilience tests completed"
          echo "Status: ${{ needs.voice-playwright-tests.result }}"
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.voice-playwright-tests.result }}';
            const emoji = status === 'success' ? '✅' : '❌';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Voice Tests Results ${emoji}\n\nVoice network resilience tests: **${status}**\n\nTested on: Chromium, Firefox, WebKit`
            });