[project]
name = "reframe-agents"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "black>=25.1.0",
    "configcat-client>=9.0.0",
    "crawl4ai>=0.6.3",
    "fastapi>=0.116.1",
    "google-adk>=0.1.0",
    "isort>=6.0.1",
    "langdetect>=1.0.9",
    "mypy>=1.16.1",
    "poethepoet>=0.36.0",
    "pydotenv>=0.0.7",
    "reportlab>=4.2.0",
    "ruff>=0.12.3",
    "scipy>=1.14.0",
    "numpy>=1.26.0",
    "structlog>=24.4.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "ruff>=0.5.0",
    "isort>=5.13.0",
    "mypy>=1.10.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-env>=1.1.5",
    "pre-commit>=3.7.0",
    "poethepoet>=0.26.0",
]
voice = [
    "google-cloud-speech>=2.26.0",
    "google-cloud-texttospeech>=2.16.3",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Enable useful rules without being overly strict
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "SIM105", # Use contextlib.suppress instead of try-except-pass
    "RUF012", # Mutable class attributes (needed for Pydantic Config)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"src/main.py" = ["RUF006"]  # Allow create_task without reference in startup

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["reframe_agents"]

# Mypy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
# Start with less strict settings to avoid blocking progress
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["crawl4ai", "bs4", "google.adk.*", "google.genai.*"]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",  # Required 80% coverage
]
asyncio_mode = "auto"
markers = [
    "load: marks tests as load tests (deselect with '-m \"not load\"')",
    "integration: marks tests as integration tests",
    "sse: marks tests that use Server-Sent Events",
    "reactive: marks tests for reactive greeting behavior",
    "voice: marks tests that require voice dependencies",
]
env = [
    "CBT_SKIP_AGENT_INIT=1",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*", "src/utils/crawl.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Poethepoet tasks
[tool.poe.tasks]
# Formatting
format = { shell = "black . && isort ." }
format-check = { shell = "black --check . && isort --check-only ." }

# Linting
lint = "ruff check ."
lint-fix = "ruff check . --fix"

# Type checking
typecheck = "mypy src"

# Testing
test = "pytest"
test-cov = "pytest --cov-report=html"

# All checks (what CI will run)
check = ["format-check", "lint", "typecheck", "test"]

# Fix all auto-fixable issues
fix = ["format", "lint-fix"]

# Development setup
setup = { shell = "uv sync --all-extras && pre-commit install" }

# OpenAPI schema export for frontend client generation
export-openapi = { shell = "python -c \"from src.main import app; import json; print(json.dumps(app.openapi(), indent=2))\" > ../frontend/openapi.json" }
