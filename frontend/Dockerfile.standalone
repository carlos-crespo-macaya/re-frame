# Standalone Frontend Dockerfile - for building without backend dependency
# Base stage with pnpm
FROM node:18-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@10.11.0 --activate

# Add necessary build tools
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Development stage
FROM base AS development

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install all dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Expose port for development
EXPOSE 3000

# Set environment for development
ENV NODE_ENV=development
ENV HOSTNAME=0.0.0.0
ENV PORT=3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Development command
CMD ["pnpm", "dev"]

# Build stage
FROM base AS builder

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Ensure OpenAPI schema exists (should be provided at build time)
RUN if [ ! -f ./openapi.json ]; then \
      echo "Error: openapi.json not found. It must be generated before building."; \
      exit 1; \
    else \
      echo "Using provided OpenAPI schema ($(wc -l < openapi.json) lines)"; \
    fi

# Always generate TypeScript client from OpenAPI schema to ensure it's up-to-date
RUN echo "Generating TypeScript API client from OpenAPI schema..."; \
    pnpm run generate:api; \
    \
    # Verify generation succeeded \
    if [ ! -f ./lib/api/generated/sdk.gen.ts ]; then \
      echo "Error: API client generation failed - sdk.gen.ts not created"; \
      exit 1; \
    fi; \
    if [ ! -f ./lib/api/generated/index.ts ]; then \
      echo "Error: API client generation failed - index.ts not created"; \
      exit 1; \
    fi; \
    \
    # Verify required functions exist \
    if ! grep -q "getUiFeatureFlags" ./lib/api/generated/sdk.gen.ts; then \
      echo "Error: Generated API client missing required function 'getUiFeatureFlags'"; \
      echo "This indicates the OpenAPI schema is incomplete or outdated"; \
      echo "Expected endpoint: /api/feature-flags/ui"; \
      exit 1; \
    fi; \
    \
    echo "API client generated successfully with all required functions"

# Build arguments for environment variables
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_ENVIRONMENT=production

# Set build-time environment variables
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_ENVIRONMENT=$NEXT_PUBLIC_ENVIRONMENT

# Use Cloud Run specific config if deploying to Cloud Run
RUN if [ -f "next.config.cloudrun.mjs" ]; then \
      mv next.config.cloudrun.mjs next.config.mjs; \
    fi

# Build the application
RUN pnpm build

# Production stage
FROM node:18-alpine AS runner

# Install pnpm
RUN corepack enable && corepack prepare pnpm@10.11.0 --activate

WORKDIR /app

# Create a non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copy built application
# Note: When using standalone mode, we don't need package.json or pnpm-lock.yaml
# The standalone build is self-contained with its own node_modules
COPY --from=builder /app/next.config.mjs ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Verify standalone build integrity
RUN node -e "const fs=require('fs'); \
  if (!fs.existsSync('./node_modules')) { \
    console.error('ERROR: node_modules missing – standalone build incomplete'); \
    process.exit(1); \
  } \
  console.log('✓ Standalone build verified: node_modules present');"

# No need to install dependencies - standalone build is self-contained

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 8080

# Set environment variable for Cloud Run
ENV PORT=8080
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:${PORT:-8080}/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Start the application
CMD ["node", "server.js"]
